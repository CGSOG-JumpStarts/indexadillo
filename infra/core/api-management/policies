<!-- infra/core/api-management/policies/global-policy.xml -->
<policies>
    <inbound>
        <!-- Global rate limiting and security -->
        <cors allow-credentials="false">
            <allowed-origins>
                <origin>*</origin>
            </allowed-origins>
            <allowed-methods>
                <method>GET</method>
                <method>POST</method>
                <method>PUT</method>
                <method>DELETE</method>
                <method>OPTIONS</method>
            </allowed-methods>
            <allowed-headers>
                <header>*</header>
            </allowed-headers>
        </cors>
        
        <!-- Security headers -->
        <set-header name="X-Content-Type-Options" exists-action="override">
            <value>nosniff</value>
        </set-header>
        <set-header name="X-Frame-Options" exists-action="override">
            <value>DENY</value>
        </set-header>
        <set-header name="X-XSS-Protection" exists-action="override">
            <value>1; mode=block</value>
        </set-header>
        <set-header name="Referrer-Policy" exists-action="override">
            <value>strict-origin-when-cross-origin</value>
        </set-header>
        
        <!-- Add request context -->
        <set-variable name="requestId" value="@(Guid.NewGuid().ToString())" />
        <set-variable name="timestamp" value="@(DateTime.UtcNow)" />
        <set-variable name="clientIp" value="@(context.Request.IpAddress)" />
        <set-variable name="userAgent" value="@(context.Request.Headers.GetValueOrDefault("User-Agent", "unknown"))" />
        
        <!-- Add tracking headers -->
        <set-header name="X-Request-ID" exists-action="override">
            <value>@((string)context.Variables["requestId"])</value>
        </set-header>
        
        <!-- Log request -->
        <log-to-eventhub logger-id="eventhub-logger" partition-id="0">
            @{
                return new JObject(
                    new JProperty("eventType", "request"),
                    new JProperty("timestamp", context.Variables["timestamp"]),
                    new JProperty("requestId", context.Variables["requestId"]),
                    new JProperty("operationName", context.Operation.Name),
                    new JProperty("method", context.Request.Method),
                    new JProperty("url", context.Request.Url.ToString()),
                    new JProperty("clientIp", context.Variables["clientIp"]),
                    new JProperty("userAgent", context.Variables["userAgent"]),
                    new JProperty("subscriptionId", context.Subscription?.Id ?? "none"),
                    new JProperty("productId", context.Product?.Id ?? "none")
                ).ToString();
            }
        </log-to-eventhub>
    </inbound>
    
    <backend>
        <forward-request />
    </backend>
    
    <outbound>
        <!-- Add response headers -->
        <set-header name="X-API-Version" exists-action="override">
            <value>1.0.0</value>
        </set-header>
        <set-header name="X-Powered-By" exists-action="override">
            <value>Indexadillo API Management</value>
        </set-header>
        
        <!-- Calculate response time -->
        <set-variable name="responseTime" value="@(DateTime.UtcNow.Subtract((DateTime)context.Variables["timestamp"]).TotalMilliseconds)" />
        
        <!-- Log response -->
        <log-to-eventhub logger-id="eventhub-logger" partition-id="0">
            @{
                return new JObject(
                    new JProperty("eventType", "response"),
                    new JProperty("timestamp", DateTime.UtcNow),
                    new JProperty("requestId", context.Variables["requestId"]),
                    new JProperty("operationName", context.Operation.Name),
                    new JProperty("statusCode", context.Response.StatusCode),
                    new JProperty("responseTime", context.Variables["responseTime"]),
                    new JProperty("subscriptionId", context.Subscription?.Id ?? "none")
                ).ToString();
            }
        </log-to-eventhub>
    </outbound>
    
    <on-error>
        <!-- Error handling -->
        <set-variable name="errorDetails" value="@{
            return new JObject(
                new JProperty("source", context.LastError.Source),
                new JProperty("reason", context.LastError.Reason),
                new JProperty("message", context.LastError.Message),
                new JProperty("scope", context.LastError.Scope),
                new JProperty("section", context.LastError.Section)
            ).ToString();
        }" />
        
        <!-- Log error -->
        <log-to-eventhub logger-id="eventhub-logger" partition-id="0">
            @{
                return new JObject(
                    new JProperty("eventType", "error"),
                    new JProperty("timestamp", DateTime.UtcNow),
                    new JProperty("requestId", context.Variables["requestId"]),
                    new JProperty("operationName", context.Operation?.Name ?? "unknown"),
                    new JProperty("error", JObject.Parse((string)context.Variables["errorDetails"]))
                ).ToString();
            }
        </log-to-eventhub>
        
        <!-- Return structured error response -->
        <return-response>
            <set-status code="@(context.Response.StatusCode)" reason="@(context.Response.StatusReason)" />
            <set-header name="Content-Type" exists-action="override">
                <value>application/json</value>
            </set-header>
            <set-body>@{
                return new JObject(
                    new JProperty("error", "An error occurred while processing your request"),
                    new JProperty("requestId", context.Variables["requestId"]),
                    new JProperty("timestamp", DateTime.UtcNow.ToString("O"))
                ).ToString();
            }</set-body>
        </return-response>
    </on-error>
</policies>

---

<!-- infra/core/api-management/policies/product-policy.xml -->
<policies>
    <inbound>
        <!-- Product-level rate limiting -->
        <rate-limit-by-key calls="1000" renewal-period="3600" counter-key="@(context.Subscription.Id)" />
        <quota-by-key calls="50000" renewal-period="2629800" counter-key="@(context.Subscription.Id)" />
        
        <!-- API key validation -->
        <check-header name="X-API-Key" failed-check-httpcode="401" failed-check-error-message="API key is required" ignore-case="true" />
        
        <!-- Extract and validate subscription from API key -->
        <set-variable name="apiKey" value="@(context.Request.Headers.GetValueOrDefault("X-API-Key", ""))" />
        
        <!-- Add user context based on subscription -->
        <choose>
            <when condition="@(context.Subscription != null)">
                <set-variable name="userId" value="@(context.Subscription.UserId ?? "unknown")" />
                <set-variable name="subscriptionName" value="@(context.Subscription.Name ?? "unknown")" />
                <set-variable name="productName" value="@(context.Product.Name ?? "unknown")" />
            </when>
            <otherwise>
                <set-variable name="userId" value="anonymous" />
                <set-variable name="subscriptionName" value="none" />
                <set-variable name="productName" value="none" />
            </otherwise>
        </choose>
        
        <!-- Add rate limit headers -->
        <set-header name="X-RateLimit-Limit" exists-action="override">
            <value>1000</value>
        </set-header>
        <set-header name="X-RateLimit-Window" exists-action="override">
            <value>3600</value>
        </set-header>
        
        <!-- Usage tracking -->
        <log-to-eventhub logger-id="eventhub-logger" partition-id="1">
            @{
                return new JObject(
                    new JProperty("eventType", "usage"),
                    new JProperty("timestamp", DateTime.UtcNow),
                    new JProperty("userId", context.Variables["userId"]),
                    new JProperty("subscriptionId", context.Subscription?.Id ?? "none"),
                    new JProperty("subscriptionName", context.Variables["subscriptionName"]),
                    new JProperty("productName", context.Variables["productName"]),
                    new JProperty("operationName", context.Operation.Name),
                    new JProperty("endpoint", context.Request.Url.Path)
                ).ToString();
            }
        </log-to-eventhub>
    </inbound>
    
    <backend>
        <!-- Add authentication to backend -->
        <set-header name="X-Functions-Key" exists-action="override">
            <value>{{function-app-key}}</value>
        </set-header>
        
        <!-- Forward user context to backend -->
        <set-header name="X-User-ID" exists-action="override">
            <value>@((string)context.Variables["userId"])</value>
        </set-header>
        <set-header name="X-Subscription-ID" exists-action="override">
            <value>@(context.Subscription?.Id ?? "none")</value>
        </set-header>
        
        <forward-request />
    </backend>
    
    <outbound>
        <!-- Calculate and add rate limit remaining -->
        <set-header name="X-RateLimit-Remaining" exists-action="override">
            <value>@{
                // This is a simplified calculation - in reality, you'd track usage more precisely
                var used = 0; // Would need to track actual usage
                return (1000 - used).ToString();
            }</value>
        </set-header>
        
        <!-- Add quota headers -->
        <set-header name="X-Quota-Limit" exists-action="override">
            <value>50000</value>
        </set-header>
        <set-header name="X-Quota-Remaining" exists-action="override">
            <value>@{
                // Simplified - would track actual quota usage
                var used = 0;
                return (50000 - used).ToString();
            }</value>
        </set-header>
    </outbound>
    
    <on-error>
        <!-- Enhanced error handling for product-specific issues -->
        <choose>
            <when condition="@(context.Response.StatusCode == 429)">
                <return-response>
                    <set-status code="429" reason="Too Many Requests" />
                    <set-header name="Content-Type" exists-action="override">
                        <value>application/json</value>
                    </set-header>
                    <set-header name="Retry-After" exists-action="override">
                        <value>3600</value>
                    </set-header>
                    <set-body>@{
                        return new JObject(
                            new JProperty("error", "Rate limit exceeded"),
                            new JProperty("code", "RATE_LIMIT_EXCEEDED"),
                            new JProperty("message", "You have exceeded the rate limit for your subscription tier"),
                            new JProperty("retryAfter", 3600),
                            new JProperty("subscriptionName", context.Variables["subscriptionName"]),
                            new JProperty("limit", "1000 requests per hour")
                        ).ToString();
                    }</set-body>
                </return-response>
            </when>
        </choose>
    </on-error>
</policies>

---

<!-- infra/core/api-management/policies/document-extract-policy.xml -->
<policies>
    <inbound>
        <base />
        
        <!-- Increased timeout for document processing -->
        <set-backend-service base-url="{{function-app-url}}" />
        <rewrite-uri template="/api/v1/document/extract" />
        
        <!-- File size validation based on subscription tier -->
        <choose>
            <when condition="@(context.Request.Headers.ContainsKey("Content-Length"))">
                <set-variable name="contentLength" value="@(int.Parse(context.Request.Headers["Content-Length"].First()))" />
                <set-variable name="subscriptionTier" value="@{
                    // Map subscription to tier - this would be more sophisticated in reality
                    var subName = context.Subscription?.Name?.ToLower() ?? "free";
                    if (subName.Contains("enterprise")) return "enterprise";
                    if (subName.Contains("professional")) return "professional";  
                    if (subName.Contains("developer") || subName.Contains("basic")) return "developer";
                    return "free";
                }" />
                
                <!-- Check file size limits based on tier -->
                <choose>
                    <when condition="@((string)context.Variables["subscriptionTier"] == "free" && (int)context.Variables["contentLength"] > 5242880)">
                        <return-response>
                            <set-status code="413" reason="Payload Too Large" />
                            <set-header name="Content-Type" exists-action="override">
                                <value>application/json</value>
                            </set-header>
                            <set-body>@{
                                return new JObject(
                                    new JProperty("error", "File size exceeds plan limit"),
                                    new JProperty("code", "FILE_TOO_LARGE"),
                                    new JProperty("maxSize", "5MB"),
                                    new JProperty("plan", "free"),
                                    new JProperty("message", "Upgrade to Developer plan for 25MB files")
                                ).ToString();
                            }</set-body>
                        </return-response>
                    </when>
                    <when condition="@((string)context.Variables["subscriptionTier"] == "developer" && (int)context.Variables["contentLength"] > 26214400)">
                        <return-response>
                            <set-status code="413" reason="Payload Too Large" />
                            <set-header name="Content-Type" exists-action="override">
                                <value>application/json</value>
                            </set-header>
                            <set-body>@{
                                return new JObject(
                                    new JProperty("error", "File size exceeds plan limit"),
                                    new JProperty("code", "FILE_TOO_LARGE"),
                                    new JProperty("maxSize", "25MB"),
                                    new JProperty("plan", "developer"),
                                    new JProperty("message", "Upgrade to Professional plan for 100MB files")
                                ).ToString();
                            }</set-body>
                        </return-response>
                    </when>
                    <when condition="@((string)context.Variables["subscriptionTier"] == "professional" && (int)context.Variables["contentLength"] > 104857600)">
                        <return-response>
                            <set-status code="413" reason="Payload Too Large" />
                            <set-header name="Content-Type" exists-action="override">
                                <value>application/json</value>
                            </set-header>
                            <set-body>@{
                                return new JObject(
                                    new JProperty("error", "File size exceeds plan limit"),
                                    new JProperty("code", "FILE_TOO_LARGE"),
                                    new JProperty("maxSize", "100MB"),
                                    new JProperty("plan", "professional"),
                                    new JProperty("message", "Contact us for Enterprise plan with larger file limits")
                                ).ToString();
                            }</set-body>
                        </return-response>
                    </when>
                </choose>
            </when>
        </choose>
        
        <!-- Content type validation -->
        <choose>
            <when condition="@(context.Request.Headers.ContainsKey("Content-Type"))">
                <set-variable name="contentType" value="@(context.Request.Headers["Content-Type"].First())" />
                <choose>
                    <when condition="@(!((string)context.Variables["contentType"]).StartsWith("multipart/form-data") && !((string)context.Variables["contentType"]).StartsWith("application/json"))">
                        <return-response>
                            <set-status code="400" reason="Bad Request" />
                            <set-header name="Content-Type" exists-action="override">
                                <value>application/json</value>
                            </set-header>
                            <set-body>@{
                                return new JObject(
                                    new JProperty("error", "Invalid content type"),
                                    new JProperty("code", "INVALID_CONTENT_TYPE"),
                                    new JProperty("message", "Content-Type must be multipart/form-data for file uploads or application/json for URL processing")
                                ).ToString();
                            }</set-body>
                        </return-response>
                    </when>
                </choose>
            </when>
        </choose>
        
        <!-- Track document processing -->
        <log-to-eventhub logger-id="eventhub-logger" partition-id="2">
            @{
                return new JObject(
                    new JProperty("eventType", "documentProcessing"),
                    new JProperty("timestamp", DateTime.UtcNow),
                    new JProperty("userId", context.Variables["userId"]),
                    new JProperty("subscriptionTier", context.Variables["subscriptionTier"]),
                    new JProperty("contentLength", context.Variables.ContainsKey("contentLength") ? context.Variables["contentLength"] : 0),
                    new JProperty("contentType", context.Variables.ContainsKey("contentType") ? context.Variables["contentType"] : "unknown")
                ).ToString();
            }
        </log-to-eventhub>
    </inbound>
    
    <backend>
        <!-- Extended timeout for document processing -->
        <forward-request timeout="300" />
    </backend>
    
    <outbound>
        <base />
        
        <!-- Track successful document processing -->
        <choose>
            <when condition="@(context.Response.StatusCode < 400)">
                <log-to-eventhub logger-id="eventhub-logger" partition-id="2">
                    @{
                        var responseBody = context.Response.Body?.As<JObject>();
                        return new JObject(
                            new JProperty("eventType", "documentProcessed"),
                            new JProperty("timestamp", DateTime.UtcNow),
                            new JProperty("userId", context.Variables["userId"]),
                            new JProperty("subscriptionTier", context.Variables["subscriptionTier"]),
                            new JProperty("pageCount", responseBody?["page_count"] ?? 0),
                            new JProperty("textLength", responseBody?["total_text_length"] ?? 0),
                            new JProperty("processingTime", responseBody?["processing_time_ms"] ?? 0)
                        ).ToString();
                    }
                </log-to-eventhub>
            </when>
        </choose>
    </outbound>
    
    <on-error>
        <base />
        
        <!-- Enhanced error tracking for document processing -->
        <log-to-eventhub logger-id="eventhub-logger" partition-id="2">
            @{
                return new JObject(
                    new JProperty("eventType", "documentProcessingError"),
                    new JProperty("timestamp", DateTime.UtcNow),
                    new JProperty("userId", context.Variables["userId"]),
                    new JProperty("subscriptionTier", context.Variables["subscriptionTier"]),
                    new JProperty("errorSource", context.LastError.Source),
                    new JProperty("errorReason", context.LastError.Reason),
                    new JProperty("statusCode", context.Response.StatusCode)
                ).ToString();
            }
        </log-to-eventhub>
    </on-error>
</policies>
